import fs from 'node:fs/promises'
import path from 'node:path'

// Script is expected to be in faktorio-api/scripts/
// process.cwd() when run via "pnpm --filter faktorio-api exec tsx scripts/update-fe-migrations.ts"
// or via "tsx scripts/update-fe-migrations.ts" from faktorio-api/
// will be /path/to/monorepo/faktorio-api

const baseDir = process.cwd() // Should be faktorio-api

const MIGRATIONS_SOURCE_DIR = path.join(baseDir, 'drizzle')
const OUTPUT_FILE_PATH = path.join(
  baseDir,
  '../faktorio-fe/src/lib/local-db/migrations.ts'
)

// Converts a migration filename (e.g., 0000_create_users.sql) to a JS variable name
// (e.g., m0000_create_users)
function migrationFileToVariableName(fileNameWithExt: string): string {
  const fileName = fileNameWithExt.replace(/\.sql$/, '')
  // Example: 0011_some_descriptive_name -> migration0011_some_descriptive_name
  return `migration${fileName}`
}

async function generateMigrationsFile() {
  console.log(`Scanning for SQL migration files in: ${MIGRATIONS_SOURCE_DIR}`)

  let allFiles: string[]
  try {
    allFiles = await fs.readdir(MIGRATIONS_SOURCE_DIR)
  } catch (error: any) {
    if (error.code === 'ENOENT') {
      console.error(
        `Error: Migrations source directory not found: ${MIGRATIONS_SOURCE_DIR}`
      )
      console.error(
        "Please ensure you've run drizzle-kit generate to create migrations."
      )
    } else {
      console.error(
        `Error reading migrations directory ${MIGRATIONS_SOURCE_DIR}:`,
        error
      )
    }
    process.exit(1)
  }

  const sqlFiles = allFiles
    .filter((file) => file.endsWith('.sql') && /^\d{4}_.*?\.sql$/.test(file)) // Matches 0000_name.sql
    .sort()

  if (sqlFiles.length === 0) {
    console.log(
      `No SQL migration files found in ${MIGRATIONS_SOURCE_DIR}. Generating an empty migrations object.`
    )
  } else {
    console.log(`Found migration files: ${sqlFiles.join(', ')}`)
  }

  const importStatements: string[] = []
  const objectProperties: string[] = []

  for (const sqlFile of sqlFiles) {
    const variableName = migrationFileToVariableName(sqlFile)

    // Vite specific import for raw file content: https://vitejs.dev/guide/assets.html#importing-asset-as-string
    importStatements.push(
      `import ${variableName} from '@api/drizzle/${sqlFile}?raw';`
    )
    // Property format: 'migration0000_create_users': migration0000_create_users,
    objectProperties.push(`  ${variableName},`)
  }

  const fileHeader = `// This file is auto-generated by faktorio-api/scripts/update-fe-migrations.ts
// Do not edit this file manually, as your changes will be overwritten.
// To regenerate this file, run 'pnpm --filter faktorio-api local-migrations-generate'.

`

  const fileContent =
    fileHeader +
    importStatements.join('\n') +
    '\n\n' +
    'export const localDBMigrations: Record<string, string> = {\n' +
    objectProperties.join('\n') +
    '\n};\n'

  try {
    await fs.writeFile(OUTPUT_FILE_PATH, fileContent, 'utf-8')
    console.log(`Successfully generated ${OUTPUT_FILE_PATH}`)
    if (sqlFiles.length > 0) {
      console.log(
        `Included migrations: ${sqlFiles.map((f) => f.replace(/\.sql$/, '')).join(', ')}`
      )
    }
  } catch (error) {
    console.error(`Error writing to ${OUTPUT_FILE_PATH}:`, error)
    process.exit(1)
  }
}

generateMigrationsFile().catch((err) => {
  console.error('Script execution failed:', err)
  process.exit(1)
})
